/*
 * Цель:
Напишите свой метод расширения с названием "Top" для коллекции IEnumerable,
принимающий значение Х от 1 до 100 и возвращающий заданное количество процентов от выборки с округлением количества элементов в большую сторону.
То есть для списка var list = new List{1,2,3,4,5,6,7,8,9};
list.Top(30) должно вернуть 30% элементов от выборки по убыванию значений, то есть [9,8,7] (33%), а не [9,8] (22%).
Если переданное значение больше 100 или меньше 1, то выбрасывать ArgumentException.
Напишите перегрузку для метода "Top", которая принимает ещё и поле, по которому будут отбираться топ Х элементов. 
Например, для var list = new List{...}, вызов list.Top(30, person => person.Age) должен вернуть 30% пользователей с наибольшим возрастом в порядке убывания оного.

Описание/Пошаговая инструкция выполнения домашнего задания:
Создайте дженерик метод расширения для IEnumerable, возвращающий коллекцию, на которой был вызван;
Ограничьте количество элементов выходной коллекции;
Создайте дженерик перегрузку метода Top, добавив для этого одним из параметров функцию, принимающую T и возвращающую int;
Сделайте код-ревью (напишите свой отзыв) на одну из работ других студентов.
Ссылки можете попросить в слаке. Для первого студента этот пункт опциональный (хотя и желательный), так как пока нет других работ.
 */
namespace Work13Lesson40
{
    internal class Program
    {
        static void Main(string[] args)
        {
            try
            {
                var list = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 };
                list.Top(30).ToList().ForEach(x => Console.WriteLine(x));
                var list2 = new List<Person> {
                    new Person() { Age = 4 },
                    new Person() { Age = 84 },
                    new Person() { Age = 10 },
                    new Person() { Age = 26 },
                    new Person() { Age = 55 },
                    new Person() { Age = 28 },
                    new Person() { Age = 33 },
                    new Person() { Age = 67 },
                    new Person() { Age = 100 },
                    new Person() { Age = 77 },
                    new Person() { Age = 90 }
                };
                list2.Top(50, person => person.Age).ToList().ForEach(x => Console.WriteLine(x.Age));
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            Console.ReadLine();
        }
    }
   
}
